{"version":3,"sources":["Algorithms/Utility.js","Algorithms/QuickSort.js","Algorithms/MergeSort.js","App.js","Algorithms/InsertionSort.js","index.js"],"names":["swap","arr","index1","index2","temp","getQuickSortAnimations","copy","animations","quickSortHelper","length","left","right","part","i","j","pivot","push","partition","getMergeSortAnimations","len","mergeSortHelper","Array","aux","mid","Math","floor","k","merge","App","useState","setArr","isSorting","setIsSorting","isSorted","setIsSorted","arrLength","setArrLength","delay","setdelay","window","innerHeight","barHeight","setBarHeight","containerRef","useRef","SORTED_COLOUR","initialiseArray","resetArrayColour","shuffle","animateArrayUpdate","forEach","index","comparison","swapped","setTimeout","prevArr","newValue","newArr","animateArrayAccess","arrayBars","current","children","arrayBarStyle","style","backgroundColor","animateSortedArray","useEffect","randomIndex","random","className","ref","map","el","idx","height","max","value","type","min","innerWidth","onChange","e","target","onClick","getInsertionSortAnimations","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cafb11d7.chunk.js","sourcesContent":["export function swap(arr, index1, index2) {\n    const temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n  }","import { swap } from './Utility';\n\nexport function getQuickSortAnimations(arr) {\n  const copy = [...arr];\n  const animations = [];\n  quickSortHelper(copy, 0, copy.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(arr, left, right, animations) {\n  if (right <= left) return;\n  const part = partition(arr, left, right, animations);\n  quickSortHelper(arr, left, part, animations);\n  quickSortHelper(arr, part + 1, right, animations);\n}\n\nfunction partition(arr, left, right, animations) {\n  let i = left;\n  let j = right + 1;\n  const pivot = arr[left];\n  while (true) {\n    while (arr[++i] <= pivot) {\n      if (i === right) break;\n      animations.push([[i], false]);\n    }\n    while (arr[--j] >= pivot) {\n      if (j === left) break;\n      animations.push([[j], false]);\n    }\n    if (j <= i) break;\n    animations.push([[i, arr[j]], true]);\n    animations.push([[j, arr[i]], true]);\n    swap(arr, i, j);\n  }\n  animations.push([[left, arr[j]], true]);\n  animations.push([[j, arr[left]], true]);\n  swap(arr, left, j);\n  return j;\n}","export function getMergeSortAnimations(arr) {\n    const copy = [...arr];\n    const len = copy.length;\n    const aux = Array(len);\n    const animations = [];\n    mergeSortHelper(copy, aux, 0, len - 1, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(arr, aux, left, right, animations) {\n    if (right <= left) return;\n    const mid = left + Math.floor((right - left) / 2);\n    mergeSortHelper(arr, aux, left, mid, animations);\n    mergeSortHelper(arr, aux, mid + 1, right, animations);\n    merge(arr, aux, left, mid, right, animations);\n  }\n  \n  function merge(arr, aux, left, mid, right, animations) {\n    for (let i = left; i <= right; i++) aux[i] = arr[i];\n    let i = left;\n    let j = mid + 1;\n    for (let k = left; k <= right; k++) {\n      if (i > mid) {\n        animations.push([[j], false]);\n        animations.push([[k, aux[j]], true]);\n        arr[k] = aux[j++];\n      } else if (j > right) {\n        animations.push([[i], false]);\n        animations.push([[k, aux[i]], true]);\n        arr[k] = aux[i++];\n      } else if (aux[j] < aux[i]) {\n        animations.push([[i, j], false]);\n        animations.push([[k, aux[j]], true]);\n        arr[k] = aux[j++];\n      } else {\n        animations.push([[i, j], false]);\n        animations.push([[k, aux[i]], true]);\n        arr[k] = aux[i++];\n      }\n    }\n  }","import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { getQuickSortAnimations } from './Algorithms/QuickSort';\nimport { getInsertionSortAnimations } from './Algorithms/InsertionSort';\nimport { getMergeSortAnimations } from './Algorithms/MergeSort';\n\nfunction App() {\n  const [arr, setArr] = useState([]);\n  const [isSorting, setIsSorting] = useState(false);\n  const [isSorted, setIsSorted] = useState(false);\n  const [arrLength,setArrLength] = useState(50);\n  const [delay,setdelay] = useState(10);\n  const [barHeight,setBarHeight] = useState(window.innerHeight/2);\n  const containerRef = useRef(null);\n  \n  const ACCESSED_COLOUR = '#DB1F48';\n  const SORTED_COLOUR = '#DB1F48';\n  \n  useEffect(initialiseArray, []);\n\n  function initialiseArray() {\n    if (isSorting) return;\n    if (isSorted) resetArrayColour();\n    setIsSorted(false);\n    const arr = [];\n    for (let i = 0; i < arrLength; i++) {\n      arr.push(i+10);\n    }\n    shuffle(arr);\n    setArr(arr);\n  }\n\n  function mergeSort() {\n    const animations = getMergeSortAnimations(arr);\n    animateArrayUpdate(animations);\n  }\n\n  function insertionSort() {\n    const animations = getInsertionSortAnimations(arr);\n    animateArrayUpdate(animations);\n  }\n\n  function quickSort() {\n    const animations = getQuickSortAnimations(arr);\n    animateArrayUpdate(animations);\n  }\n\n  function animateArrayUpdate(animations) {\n    if (isSorting) return;\n    setIsSorting(true);\n    animations.forEach(([comparison, swapped], index) => {\n      setTimeout(() => {\n        if (!swapped) {\n          if (comparison.length === 2) {\n            const [i, j] = comparison;\n            animateArrayAccess(i);\n            animateArrayAccess(j);\n          } else {\n            const [i] = comparison;\n            animateArrayAccess(i);\n          }\n        } else {\n          setArr((prevArr) => {\n            const [k, newValue] = comparison;\n            const newArr = [...prevArr];\n            newArr[k] = newValue;\n            return newArr;\n          });\n        }\n      }, index * delay);\n    });\n    setTimeout(() => {\n      animateSortedArray();\n    }, animations.length * delay);\n  }\n\n  function animateArrayAccess(index) {\n    const arrayBars = containerRef.current.children;\n    const arrayBarStyle = arrayBars[index].style;\n    setTimeout(() => {\n      arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\n    }, delay);\n    setTimeout(() => {\n      arrayBarStyle.backgroundColor = '';\n    }, delay * 2);\n  }\n\n  function animateSortedArray() {\n    const arrayBars = containerRef.current.children;\n    for (let i = 0; i < arrayBars.length; i++) {\n      const arrayBarStyle = arrayBars[i].style;\n      setTimeout(\n        () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\n        i * delay,\n      );\n    }\n    setTimeout(() => {\n      setIsSorted(true);\n      setIsSorting(false);\n    }, arrayBars.length * delay);\n  }\n\n  function resetArrayColour() {\n    const arrayBars = containerRef.current.children;\n    for (let i = 0; i < arr.length; i++) {\n      const arrayBarStyle = arrayBars[i].style;\n      arrayBarStyle.backgroundColor = '';\n    }\n  }\n\n  const shuffle = (arr) => {\n    for (let i = arr.length - 1; i >= 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      const temp = arr[i];\n      arr[i] = arr[randomIndex];\n      arr[randomIndex] = temp;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"ArrayContainer\" ref={containerRef}>\n        {arr.map((el, idx) => <div className=\"bar\" style={{ height: (el / Math.max(...arr) * barHeight) }} key={idx}></div>)}\n      </div>\n      <div className=\"Controls\">\n        <div className=\"sliders\">\n          <div className=\"slider\">\n            <input className=\"range\" value={arrLength} type=\"range\" min=\"5\" max={window.innerWidth / 4} onChange={(e)=>{setArrLength(e.target.value)}}></input>\n            <p className=\"displayParameters\">Array Length - {arrLength}</p>\n          </div>\n          <div className=\"slider\">\n            <input className=\"range\" value={barHeight} type=\"range\" min=\"10\" max={window.innerHeight - 100} onChange={(e)=>{setBarHeight(e.target.value)}}></input>\n            <p className=\"displayParameters\"> Bar Height - {barHeight}px</p>\n          </div>\n          <div className=\"slider\">\n            <input className=\"range\" value={delay} type=\"range\" min=\"1\" max=\"120\" onChange={(e)=>{setdelay(e.target.value)}}></input>\n            <p className=\"displayParameters\">Delay - {delay}ms</p>\n          </div>\n        </div>\n        <div className=\"buttons\">\n          <input className={`Btn ${isSorted ? \"newArr\" : \"\"}`} type=\"button\" value=\"New Array\" onClick={initialiseArray}></input>\n          <input className=\"Btn\" type=\"button\" value=\"Quick Sort\" onClick={quickSort}></input>\n          <input className=\"Btn\" type=\"button\" value=\"Insertion Sort\" onClick={insertionSort}></input>\n          <input className=\"Btn\" type=\"button\" value=\"Merge Sort\" onClick={mergeSort}></input>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\nimport { swap } from \"./Utility\";\n\nexport function getInsertionSortAnimations(arr) {\n  const copy = [...arr];\n  const animations = [];\n  for (let i = 1; i < copy.length; i++) {\n    for (let j = i - 1; j >= 0; j--) {\n      animations.push([[j, j + 1], false]);\n      if (copy[j + 1] < copy[j]) {\n        animations.push([[j, copy[j + 1]], true]);\n        animations.push([[j + 1, copy[j]], true]);\n        swap(copy, j, j + 1);\n      } else break;\n    }\n  }\n  return animations;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}